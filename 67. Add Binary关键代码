class Solution {
public:
    void binaryadd(string a, string b,int& l_a,int& l_b,stack<char>& ret,int &tmp)
    {
        while(l_a!=-1 && l_b!=-1)
        {
            if(a[l_a]-'0'+b[l_b]-'0'+tmp==3) //该位是1+1+1的情况
            {
                ret.push(1+'0');
                tmp=1;
            }
            else if(a[l_a]-'0'+b[l_b]-'0'+tmp==2) //该位是1+1+0,1+0+1,0+1+1的情况
            {
                ret.push(0+'0');
                tmp=1;
            }
            else if(a[l_a]-'0'+b[l_b]-'0'+tmp==1)//该位是1+0+0,0+1+0,0+0+1的情况
            {
                ret.push(1+'0');
                tmp=0;
            }
            else                                     //该位是0+0+0的情况
            {
                ret.push(0+'0');
                tmp=0;
            }
            l_a--;
            l_b--;
        }
    }
    string addBinary(string a, string b) {
        if(a.size()==0 ||b.size()==0 ) return "0";
        
        
        int l_a=a.size()-1;
        int l_b=b.size()-1;
        int l_c=l_a+l_b;
        string c[l_c];
        memset(c,'0',sizeof(c));
        
        
        stack<char> ret;
        string result="";
        int tmp=0;
        binaryadd(a,b,l_a,l_b,ret,tmp);
        if(l_a) binaryadd(a,c,l_a,l_c,ret,tmp);
        if(l_b) binaryadd(c,b,l_c,l_b,ret,tmp);
        
        // while(l_a!=-1)
        // {
        //     if((a[l_a]-'0'+tmp)/2==1) //该位是1+1的情况
        //     {
        //         ret.push(0+'0');
        //         tmp=1;
        //     }
        //     else if((a[l_a]-'0'+tmp)%2==1)//该位是1+0或0+1的情况
        //     {
        //         ret.push(1+'0');
        //         tmp=0;
        //     }
        //     else                                     //该位是0+0的情况
        //     {
        //         ret.push(0+'0');
        //         tmp=0;
        //     }
        //     l_a--;
        // }
        // while(l_b!=-1)
        // {
        //     if((b[l_b]-'0'+tmp)/2==1) //该位是1+1的情况
        //     {
        //         ret.push(0+'0');
        //         tmp=1;
        //     }
        //     else if((b[l_b]-'0'+tmp)%2==1)//该位是1+0或0+1的情况
        //     {
        //         ret.push(1+'0');
        //         tmp=0;
        //     }
        //     else                                     //该位是0+0的情况
        //     {
        //         ret.push(0+'0');
        //         tmp=0;
        //     }
        //     l_b--;
        // }
        if(l_a==-1 && l_b==-1 && tmp==1)
        {
            ret.push(tmp+'0');
            tmp=0;
        }
        while(!ret.empty())
        {
            result+=ret.top();
            ret.pop();
        }
        return result;
    }
};
