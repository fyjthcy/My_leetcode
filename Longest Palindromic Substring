class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        int max = 1;
        int start = 0;
        int table[1000][1000];//状态标定矩阵
        memset(table,0,sizeof(table));
        for (int i=0;i<n;i++)//对角线置为1
        {
            table[i][i] = 1;
        }
        for(int i=0;i<n-1;i++)//相邻两个字符为相同，那么将对应table置为1
        {
            if(s[i]==s[i+1])
            {
                table[i][i+1]= 1;
                table[i+1][i]= 1;
                start = i;
                max = 2;
            }
        }
        for(int j=1;j<n;j++)//j<i的情况下，table[i+1][j-1]赋给table[i][j]，然后来判断是否是1，为1则是回文记录下来
        {
            for(int i=0;i<j;i++)
            {
                if(s[i]==s[j])
                {
                    table[i][j] = table[i+1][j-1];   
                }
                if(table[i][j]==1 && j-i+1>max)
                {
                    max = j-i+1;
                    start=i;
                }
            }
        }
        return s.substr(start,max);
    }
};
