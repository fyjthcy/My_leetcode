class Solution {
public:
    vector<int> ret;
    int find_l_index(vector<int>& nums, int target)
    {
        int l=0;
        int r=nums.size()-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(nums[mid]<target) l=mid+1;
            else r=mid-1;
        }
        if(nums[l]!=target) return -1;
        return l;
    }
    int find_r_index(vector<int>& nums, int target)
    {
        int l=0;
        int r=nums.size()-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(nums[mid]>target) r=mid-1;
            else l=mid+1;
        }
        if(nums[r]!=target) return -1;
        return r;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size()<=0) return nums;
        int leftindex=find_l_index(nums,target);
        int rightindex=find_r_index(nums,target);
        
        ret.push_back(leftindex);
        ret.push_back(rightindex);
        return ret;
    }
};
