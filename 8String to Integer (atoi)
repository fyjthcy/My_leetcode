class Solution {
public:
    int myAtoi(string str) {
        long long cur=0;
        int num=0;
        int i=0;
        int flag1=0;//标记负号
        int flag2=0;//标记正号
        
        while(str[i]!='\0' && str[i]==' ') i++; //过滤掉字符串前面的空格
        if(str[i]=='-') {                       //遇到-号的话，向后移动一位
            flag1++;
            i++;
        }
        else if(str[i]=='+') {//必须有else 否则-+这种情况会由i++给跨过去。。。
            flag2++;
            i++;
        }
        for(;str[i]!='\0';i++)//只要字符串不为0，那么就一直遍历到最后
        {
            
            if(str[i]>='0' && str[i]<='9')//字符串是在0-9的范围内
            {
                if(flag1==2)              //是负数的情况下，且到了第二位时候
                {
                    cur=cur*10-(str[i]-'0');
                    if(cur<-2147483648) return -2147483648;
                }
                else if(flag1==1) {       //处理负数的第一位时候，进入这个if，然后flag1加到了2
                    cur=-str[i]+'0';
                    flag1++;
                }
                else                      //此种情况下，就是正数的时候了
                {
                    cur=cur*10+(str[i]-'0');
                    if(cur>2147483647) return 2147483647;
                }
            }
            else break;
        }
        num=(int)cur; //返回的是int型，所以long long要转成int
        return num;
    }
};
